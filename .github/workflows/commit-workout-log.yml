name: Commit workout logs from issues

on:
  issues:
    types: [opened, edited]

permissions:
  contents: write
  issues: write

jobs:
  commit-log:
    # Only run for issues created via the app (body contains this marker)
    if: contains(github.event.issue.body, 'Paste will be committed by Actions.')
    runs-on: ubuntu-latest
    steps:
      - name: Extract JSON and commit to performed/
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const body = issue.body || '';

            // Find first fenced code block, prefer ```json ... ```
            const jsonBlock = body.match(/```json\s*([\s\S]*?)\s*```/i) || body.match(/```\s*([\s\S]*?)\s*```/i);
            if (!jsonBlock) {
              core.notice('No JSON code block found; skipping.');
              return;
            }

            const jsonText = (jsonBlock[1] || '').trim();
            let data;
            try {
              data = JSON.parse(jsonText);
            } catch (e) {
              core.setFailed('Invalid JSON in issue body: ' + e.message);
              return;
            }

            // Basic shape check
            if (!data || typeof data !== 'object' || !data.exercises) {
              core.setFailed('JSON missing expected "exercises" field.');
              return;
            }

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const branch = context.payload.repository.default_branch;

            const nowIso = new Date().toISOString().replace(/[:]/g, '-');
            const rawFile = String(data.file || 'unknown').replace(/[\r\n\t]/g, ' ').slice(0, 180);
            const safeFile = rawFile.replace(/[^A-Za-z0-9._-]+/g, '-');
            const path = `performed/${nowIso}_${safeFile}.json`;

            const content = Buffer.from(JSON.stringify(data, null, 2)).toString('base64');

            const commit = await github.rest.repos.createOrUpdateFileContents({
              owner,
              repo,
              path,
              message: `chore(log): add workout log from #${issue.number}`,
              content,
              branch,
            });

            const fileUrl = commit.data.content && commit.data.content.html_url
              ? commit.data.content.html_url
              : `https://github.com/${owner}/${repo}/blob/${branch}/${encodeURI(path)}`;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: issue.number,
              body: `Saved log to ${fileUrl}`,
            });

            // Label the issue for tracking; ignore if label doesn't exist
            try {
              await github.rest.issues.addLabels({ owner, repo, issue_number: issue.number, labels: ['log-saved'] });
            } catch (e) {
              core.info('Label add failed or label missing; continuing.');
            }

            // Close the issue after saving the log
            await github.rest.issues.update({ owner, repo, issue_number: issue.number, state: 'closed' });
